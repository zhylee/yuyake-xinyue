/**
 * 这里的依赖都是项目的基础依赖，将来添加的子项目都会继承这些依赖。在这里配
 * 置，可以减少重复的配置，也便于版本升级。当需要修改版本的时候，只需要修改
 * 这里就可以了，子项目依赖的版本就会自动变化。
 */

// 定义扩展属性（给脚本用的脚本）
buildscript {
    // 定义公共版本号
    ext {
        springBootVersion = "2.5.1"
        springManagementVersion = "1.0.10.RELEASE"
        springCloudVersion = "2020.0.3"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springManagementVersion}"
    }
}

allprojects {
    group = 'cn.yuyake'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'  // spring boot 插件
    apply plugin: 'io.spring.dependency-management'  // spring 版本管理插件
    sourceCompatibility = '11'
    targetCompatibility = '11'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
    }

    configurations {
        // 去掉 Spring Boot 默认的日志，使用 log4j2
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        // 去掉 Junit 的依赖，使用 TestNG 单元测试框架
        all*.exclude group: 'org.junit.jupiter', module: 'junit-jupiter'
    }

    // Spring Cloud 文档 https://spring.io/projects/spring-cloud
    // 原文的dependencyManagement声明整套组件的BOM已经过时，使用原生的platform指令更加简洁
    // 技术平台的使用方，仅需添加一行 platform() 即可管理一组依赖约束
    dependencies {
        api platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        api platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }

    // 依赖降级和排除 https://docs.gradle.org/current/userguide/dependency_downgrade_and_exclude.html
    dependencies {
        // 使用 JWT 时 Java 11 不会自带 javax.xml.bind 相关的包，额外引入
        implementation 'com.sun.xml.bind:jaxb-impl:3.0.1'
        // 引入 Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter'
        // 引入 log4j2 的日志框架
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        // 引入测试包
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        // 引入 TestNG 单元测试框架
        testImplementation 'org.testng:testng:7.4.0'
        // 引入配置管理
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        // 引入健康监控
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        // 引入 Consul 客户端，用于服务发现
        implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
        // 引用 Spring Cloud Bus 依赖的消息队列，Kafka
        // implementation 'org.springframework.cloud:spring-cloud-starter-bus-kafka'
    }

    test {
        // 要用junit可以换成：useJUnitPlatform()
        useTestNG()
    }
}
